<?php

namespace Bpi\ApiBundle\Domain\Repository;

use Bpi\ApiBundle\Domain\Entity\Channel;
use Bpi\ApiBundle\Domain\Entity\ChannelFacet;
use Doctrine\ODM\MongoDB\DocumentRepository;
use Doctrine\ODM\MongoDB\Query\Builder as QueryBuilder;

/**
 * ChannelFacetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChannelFacetRepository extends DocumentRepository
{

    /**
     * @var array of applied filters
     */
    private $filters;

    /**
     * @var string applied logical operator
     */
    private $logicalOperator;

    /**
     * Prepare facets for a channel
     *
     * @param Channel $channel
     */
    public function prepareFacet(Channel $channel)
    {
        $facet = new ChannelFacet();

        $agency = $channel->getChannelAdmin()->getUserAgency();
        $data = new \stdClass();
        $data->agency_id = $agency->getPublicId();

        $facet->setChannelId($channel->getId());
        $facet->setFacetData($data);

        $this->dm->persist($facet);
        $this->dm->flush();
    }

    /**
     * Build facets and get channel ids by which will be made request to DB
     *
     * @param array  $filters         applied filters
     * @param string $logicalOperator by default OR could be AND
     * @return \StdClass
     *  contain array of built facets and array of channel ids
     */
    public function getFacetsByRequest($filters = array(), $logicalOperator = 'OR')
    {
        $channelIds = array();

        $this->filters = $filters;
        $this->logicalOperator = $logicalOperator;

        $qb = $this->createQueryBuilder('Entity\ChannelFacet');

        $filteredChannels = $this->iterateTerms($qb);
        foreach ($filteredChannels as $key => $channel) {
            $id = $channel->getChannelId();
            if (!empty($id)) {
                $channelIds[] = $id;
            }
        }

        $qb->map('
                function() {
                    for (var i in this.facetData) {
                        if (i == "tags") {
                            for (var j in this.facetData[i]) {
                                var key = {
                                    facetName: "tags",
                                    facetValue: this.facetData[i][j]
                                }
                                emit(key, 1);
                            }
                        } else {
                            var key = {
                                facetName: i,
                                facetValue: this.facetData[i]
                            }
                            emit(key, 1);
                        }
                    }
                }
            ')
            ->reduce('
                function(key, values) {
                    var sum = 0;
                    for(var i in values) {
                        sum += values[i];
                    }
                    return sum;
                };
            ');

        $facets = array();
        $result = $this->iterateTerms($qb);
        foreach ($result as $facet) {
            if ($facet['_id']['facetName'] == 'agency_id') {
                $agency = $this->dm->getRepository('BpiApiBundle:Aggregate\Agency')->loadUserByUsername($facet['_id']['facetValue']);
                $facets['agency_id'][$facet['_id']['facetValue']]['agencyName'] = $agency->getName();
                $facets['agency_id'][$facet['_id']['facetValue']]['count'] = $facet['value'];
            } else {
                $facets[$facet['_id']['facetName']][$facet['_id']['facetValue']] = $facet['value'];
            }
        }

        return (object) array(
            'facets' => $facets,
            'channelIds' => $channelIds,
        );
    }

    /**
     * Remove facet by channel.
     *
     * @param Channel $channel
     */
    public function delete(Channel $channel)
    {
        $this->createQueryBuilder()
            ->remove()
            ->field('channelId')->equals($channel->getId())
            ->getQuery()
            ->execute()
            ;
    }

    /**
     * Get facet for a channel.
     *
     * @param Channel $channel
     *   The channel.
     *
     * @return ChannelFacet
     *   The facet if it exists. Otherwise null.
     */
    public function getFacet(Channel $channel)
    {
        try {
            return $this->createQueryBuilder()
                ->field('channelId')->equals($channel->getId())
                ->getQuery()
                ->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * Iterate over applied filters and make request to db
     * @param $qb object of query builder
     * @return mixed
     *  array of facets or facet entities
     */
    private function iterateTerms(QueryBuilder $qb)
    {
        if (!empty($this->filters)) {
            foreach ($this->filters as $name => $values) {
                $terms = array();
                foreach ($values as $value) {
                    switch ($name) {
                        default:
                            $terms[] = $value;
                            break;
                    }
                }

                $fieldName = 'facetData.'.$name;
                // Allow filtering on (channel) id.
                if ($name === 'id') {
                    $fieldName = 'channelId';
                }

                switch (strtoupper($this->logicalOperator)) {
                    case 'AND':
                        $qb->addAnd($qb->expr()->field($fieldName)->in($terms));
                        break;

                    default:
                        $qb->addOr($qb->expr()->field($fieldName)->in($terms));
                        break;
                }
            }
        }

        $result = $qb
                ->getQuery()
                ->execute()
                ;

        return $result;
    }
}
